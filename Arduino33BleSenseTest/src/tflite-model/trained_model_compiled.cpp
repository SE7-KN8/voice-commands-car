/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 18.07.2021 10:16:52

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 1616;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.050951555371284485, } };
const TfArray<1, int> quant0_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 208, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data2[8] = { -5194, -8882, -5121, -5229, -9013, -2712, 2179, -4861, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 0.00029403506778180599, 0.00026267883367836475, 0.00030931408400647342, 0.00037268723826855421, 0.00022985434043221176, 0.00034553578007034957, 0.00033298184280283749, 0.00031816036789678037, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[16] = { -2715, 423, -1001, 327, -3552, 766, -2080, -61, -2664, -2017, -421, -1297, -2006, -3249, -1278, -616, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 0.00047095093759708107, 0.0012863848824054003, 0.00072194996755570173, 0.00065418117446824908, 0.00029321009060367942, 0.00048310565762221813, 0.00081026635598391294, 0.00087380572222173214, 0.00027693624724633992, 0.00032537136576138437, 0.00092426832998171449, 0.000993385910987854, 0.00054783117957413197, 0.00056727154878899455, 0.0010404355125501752, 0.0012567142257466912, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[5] = { 3779, 199, -123, -2619, -293, };
const TfArray<1, int> tensor_dimension4 = { 1, { 5 } };
const TfArray<1, float> quant4_scale = { 1, { 0.00071187736466526985, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int8_t tensor_data5[5*208] = { 
  -37, 15, 7, 6, -16, 21, -3, 16, 3, -43, -47, -10, -30, -21, -24, -22, -28, 1, -13, 13, -13, 17, -22, 9, 10, -47, -57, -21, -19, -36, -55, -2, -15, -9, -64, -7, -34, 25, -13, 28, 14, -43, -39, -47, -25, -43, -54, -22, -39, -20, -31, 8, -27, 22, -20, 21, 13, -48, -30, -44, -29, -19, -51, -66, -57, -27, -38, -3, -31, 25, -13, 24, 7, -76, -31, -27, -53, -34, -59, -58, -36, -20, -41, 4, -35, 17, -43, 11, 14, -85, -30, -30, -61, -12, -56, -61, -33, -25, -23, 1, -34, 19, -12, 19, 21, -112, -15, -66, -59, -22, -62, -50, -34, -11, -20, -11, -20, 20, -31, 8, 4, -123, -28, -25, -53, -38, -35, -76, -35, -21, -54, -8, -26, 26, -15, 0, 13, -91, -17, -17, -38, -18, -76, -97, -39, -12, -33, -2, -31, 15, -23, -10, -7, -87, -47, -5, -40, 15, -30, -105, -23, -10, -14, 9, -18, 15, 6, 2, -2, -58, -48, 1, -29, -9, -27, -56, -33, -16, -21, 12, -38, 11, -27, 0, 15, -37, -55, -28, -19, -25, -11, -41, -17, 1, -47, 24, -16, 15, -57, -40, 20, -50, -11, -74, -50, 25, -57, -62, 
  -23, -9, 14, 12, -6, -7, -17, -21, 0, 1, 24, 37, 29, 14, 1, -53, -29, 11, 2, -3, 8, -13, -31, -9, -23, -4, 12, 22, 14, -11, 2, -5, -39, 15, -3, -19, 1, -4, -7, -12, -21, -7, 12, 24, 7, -12, -6, 15, -27, 18, 20, -30, 8, -16, 17, -22, -71, -9, 16, 24, 1, 2, -2, 7, -29, 28, 4, -38, 4, -3, -6, -26, -76, -13, 27, 25, 3, -10, 7, 14, -22, 30, 11, -30, 4, 5, -4, -29, -49, -12, 9, 30, 10, -15, -4, 13, -20, 24, -9, -19, 9, 5, -18, -29, -54, -6, 5, 22, 11, -25, -1, 14, -21, 20, -2, -37, 9, -7, -11, -39, -63, -2, 19, 16, 13, -23, 13, 10, -13, 20, -2, -31, 11, -10, -15, -27, -127, -2, 18, 11, 12, -14, 2, 15, -9, 22, 3, -35, 14, -3, -13, -34, -28, 5, 13, 19, 14, -36, 5, 20, -3, 20, 1, -22, 20, 0, -19, -31, -35, -8, 14, 25, 11, -29, -17, 23, -17, 25, -16, -35, 1, -7, 2, -12, -13, -2, 26, 27, 15, -22, -8, 11, -29, 10, -12, -25, -8, -14, -2, 30, -71, -4, 23, 13, 13, -87, -8, 13, 
  8, 1, -3, -13, 20, -7, -1, -13, -6, -16, -6, -33, -14, -15, 9, 5, 13, 2, -6, -36, 27, -12, -6, -17, 6, 13, 0, -31, -15, -17, 25, -8, 13, -10, 10, -2, 12, -10, -11, -26, -21, 23, 5, -26, 1, -13, 19, -5, 11, 0, -2, 10, 25, -11, -6, -13, 1, 12, -1, -11, -16, -10, 24, -9, 13, -9, -1, 4, 15, -12, -11, -5, -1, 14, -2, -18, -11, -8, 24, -11, 9, -7, -8, 18, 20, -20, -13, -6, 7, 17, 5, -15, -11, -3, 18, -7, 7, -8, -8, 17, 13, -13, -3, 11, 14, 10, -1, -19, -6, -9, 19, -11, 3, -20, -7, 17, 20, -17, -9, 5, 1, 17, -16, -30, -2, -10, 25, -24, 9, -25, -12, 16, -1, -2, -10, 4, 6, 10, -11, -15, -8, -5, 12, -16, 2, -30, -2, 14, 22, -11, -1, 0, 1, 8, -4, -6, -13, -3, 21, -20, -9, -21, -14, 12, 16, 0, -10, 17, 1, 14, -4, -8, -5, -27, 24, -14, -1, -18, -11, 17, 10, 3, -22, 14, 17, 13, -3, -14, -6, -25, 10, -18, 3, -13, 2, 2, -11, 4, -22, -20, -17, 8, -7, 11, -9, 7, -1, -11, 
  11, -2, -47, 5, 4, -6, 11, -3, -44, 4, 16, -37, -4, -6, 7, -25, 18, -6, 2, 12, 13, -10, 25, -2, -45, 5, 9, -24, -3, 15, 13, -12, 16, -4, 27, 6, 1, -10, 31, -32, -16, 5, 11, -13, -15, 32, 6, -4, 19, 0, 19, -4, 10, -10, 33, -11, -17, 1, 16, -7, -10, 31, 14, -12, 19, 6, 26, 3, 3, 1, 33, -18, 4, 3, 9, -26, -6, 30, 10, -10, 17, 8, 31, 11, 2, -9, 23, -10, -16, 2, 25, -4, -8, 31, 7, 6, 14, 1, 20, 8, -7, 5, 27, -1, 0, 3, 2, -15, 8, 19, 3, -4, 14, -5, 24, 13, -11, -7, 32, 2, -2, 3, 10, -11, -8, 26, 10, -13, 20, 12, 24, 5, -7, -1, 27, 6, 10, 3, 14, -12, -30, 34, 4, -12, 15, -1, 25, 5, -5, 5, 24, 6, 2, 7, 18, -8, 0, 20, 23, -9, 23, -4, 16, 10, -17, 2, 17, 14, -6, 6, 15, -20, -17, 29, 4, -14, 16, -5, 20, 15, -2, 10, 38, 6, 25, -1, 24, -33, -26, 22, 3, -2, 7, -26, 13, 15, 16, -7, 22, 12, 4, 13, 5, -1, 14, 25, 19, -8, 
  1, -8, 14, 0, -14, -5, -20, 25, 11, 7, 0, 7, 22, -12, -54, 38, -11, -2, -4, 17, -38, 6, -12, 19, 20, 8, -1, 10, 20, -5, -53, -1, -6, -5, -9, 4, -33, 6, -17, 42, 26, 3, -5, 10, 26, -15, -38, 6, 0, -2, -35, 0, -30, 4, -61, 31, 38, 9, -8, 9, 30, -25, -36, 17, 10, 3, -30, 1, -24, 6, -26, 26, 20, 8, -7, 13, 18, -27, -25, 22, 0, -5, -25, -3, -21, 3, -34, 20, 21, 9, -13, 19, 26, -20, -20, 19, 1, 4, -16, 6, -14, -3, -4, 21, 20, 7, -17, 14, 25, -22, -24, 21, 4, -3, -26, -10, -17, -5, -13, 21, 14, 7, 0, 11, 21, -5, -21, 17, 10, -1, -23, -10, -10, -10, -17, 6, 15, 8, 4, 16, 25, 3, -27, 20, 13, 0, -22, -11, -17, -12, -13, 20, 18, 11, 5, 12, 16, 3, -21, 26, 25, -2, -32, -24, -26, -14, -17, -36, 16, 9, 0, 10, 20, -1, -28, 16, 3, -16, -19, -46, -2, -16, -36, -23, -71, 14, -6, 30, 33, -29, -42, 15, -7, 2, -14, -45, -27, -13, -7, -1, 12, -8, -30, 18, -4, -35, -1, 27, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 5,208 } };
const TfArray<1, float> quant5_scale = { 1, { 0.016903242096304893, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[8*1*3*13] = { 
  /* [0][0][][] */ -117,82,45,-25,58,-12,-59,-14,9,2,39,22,-16, -17,127,40,-28,57,-21,-44,-52,-20,26,19,30,-1, -54,110,106,-81,29,-21,-53,-49,-20,-14,72,29,18, 
  /* [1][0][][] */ 27,92,-22,-26,55,-21,-52,101,-44,-55,20,2,8, 47,98,11,-73,7,3,-16,30,30,-18,11,-7,-15, 44,127,-48,-80,27,42,-51,7,13,-16,4,-19,22, 
  /* [2][0][][] */ -8,127,-91,3,3,38,24,40,-30,24,-51,-7,49, -17,36,-95,61,41,54,16,-16,6,17,-22,28,-36, 9,-39,-80,41,57,9,9,2,-16,-60,29,26,-68, 
  /* [3][0][][] */ -107,127,-50,-6,43,-45,-47,-17,20,24,16,5,-20, -46,65,-56,71,13,-44,16,-9,26,43,11,-14,54, -71,97,-59,-12,-10,20,-15,13,74,3,-58,12,-12, 
  /* [4][0][][] */ 103,17,-25,27,17,-36,57,88,-91,-19,8,-29,2, 73,27,-70,50,-81,-24,114,69,-48,5,-5,-57,-9, 97,-35,-42,55,-77,28,127,31,-53,17,8,-39,25, 
  /* [5][0][][] */ 105,-21,31,-39,-2,-35,43,20,11,-14,5,-13,6, 89,26,16,35,15,-13,45,-16,-12,30,15,9,10, -28,-127,42,-33,40,-11,13,-11,22,14,-20,3,3, 
  /* [6][0][][] */ -127,-68,17,-1,38,30,-3,-29,-2,-4,7,-20,16, -115,-60,-5,23,29,7,3,5,34,24,-18,5,-4, -11,-41,8,45,-34,16,16,10,-27,-8,1,-34,34, 
  /* [7][0][][] */ 18,12,27,31,-127,27,3,-34,8,-9,-6,15,-1, -26,-17,104,15,-107,10,-61,-33,14,-11,-10,17,-9, -21,13,111,23,-40,-15,-82,5,-7,5,19,4,14, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,13 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0057708751410245895, 0.0051554623059928417, 0.0060707484371960163, 0.0073145409114658833, 0.0045112329535186291, 0.0067816530354321003, 0.0065352637320756912, 0.0062443702481687069, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ 28,-1,27,15,-19,-38,4,-5, 9,18,6,4,-6,-87,-29,-8, -19,6,46,-1,23,3,-127,-16, 
  /* [1][0][][] */ 0,5,-7,7,1,5,-127,2, -4,0,-16,2,-10,-3,-117,-4, 12,2,-22,-1,-36,-7,-21,4, 
  /* [2][0][][] */ -5,-5,15,5,15,4,-45,-18, -8,-16,-40,-9,4,-8,-32,39, 5,-14,-127,-81,-53,-7,-15,9, 
  /* [3][0][][] */ -21,-8,4,-28,32,16,-5,2, -24,-36,9,-16,-31,0,-6,-3, -33,-127,-10,-69,-56,11,-1,1, 
  /* [4][0][][] */ 85,-31,-87,-14,26,-76,17,-1, -1,-20,-72,-20,18,-19,-35,17, 49,-1,-41,-29,51,-11,-127,9, 
  /* [5][0][][] */ 14,-127,-14,-1,-56,-10,-10,10, 23,-84,-7,21,-26,-29,-6,-27, -33,-126,4,-28,-16,31,-12,-36, 
  /* [6][0][][] */ -18,-1,4,42,6,-2,-127,-49, -43,-2,8,-17,-5,-1,-121,-39, -26,1,-3,-21,-1,9,-31,46, 
  /* [7][0][][] */ -44,-102,-35,-88,-12,-17,-1,-8, -10,-25,-112,-34,2,-13,-3,-11, -9,-12,-127,-8,-10,33,-2,-1, 
  /* [8][0][][] */ -22,-74,-47,-44,-29,15,-20,-21, -76,-82,-91,-127,-50,98,-34,-3, -48,-94,-124,-73,-11,-25,12,5, 
  /* [9][0][][] */ 4,64,13,-20,44,15,-58,19, -44,-16,11,-26,-9,-2,-27,-11, -127,-49,38,-11,11,18,8,-87, 
  /* [10][0][][] */ -5,-63,-12,-99,-99,-23,4,-67, -14,-114,-2,-127,-68,-26,-1,-68, -6,-14,-12,-62,1,-25,15,-68, 
  /* [11][0][][] */ -29,-127,-28,-36,0,-6,13,5, -36,-75,-5,-37,-8,-1,1,7, -48,-1,7,-35,29,-4,-8,10, 
  /* [12][0][][] */ -61,-30,12,-127,-13,22,-3,-21, -33,-27,11,-38,5,4,-5,-4, -17,67,21,-12,-2,14,-17,-2, 
  /* [13][0][][] */ -58,6,53,7,2,-13,-91,-62, -79,-9,-31,-10,14,8,-127,-2, 1,-19,-78,-27,-3,-2,-42,53, 
  /* [14][0][][] */ 16,3,-11,11,7,2,-20,20, -1,1,-8,-7,-10,4,-127,-5, -31,-1,-7,-29,22,-1,-101,-2, 
  /* [15][0][][] */ -4,26,3,0,-13,-5,-19,2, 4,-7,-2,2,-64,-5,-1,3, 4,-3,-3,2,-127,-24,-2,4, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0097311176359653473, 0.026580184698104858, 0.014917436055839062, 0.013517149724066257, 0.0060585122555494308, 0.0099822673946619034, 0.016742290928959846, 0.018055185675621033, 0.0057222507894039154, 0.0067230509594082832, 0.019097879528999329, 0.020526034757494926, 0.011319671757519245, 0.011721361428499222, 0.021498207002878189, 0.025967108085751534, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data9[4] = { 1, 50, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data10[4] = { 1, 1, 25, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data11[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant12_scale = { 1, { 0.050951555371284485, } };
const TfArray<1, int> quant12_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.048396386206150055, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.048396386206150055, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,25,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.048396386206150055, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,25,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.048396386206150055, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.042114842683076859, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.042114842683076859, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.042114842683076859, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,208 } };
const TfArray<1, float> quant20_scale = { 1, { 0.042114842683076859, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,5 } };
const TfArray<1, float> quant21_scale = { 1, { 0.19923359155654907, } };
const TfArray<1, int> quant21_zero = { 1, { 35 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,5 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1040, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 312, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension13, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension15, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension17, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension19, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 208, (TfLiteIntArray*)&tensor_dimension21, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
